<?xml version="1.0" encoding="utf-8"?><Report xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><GUID>c9d84081-7731-4fb4-ab42-2a0d065c43eb</GUID><ViewGUID>a7143b42-f147-4cd2-aaf2-c2972a6a0830</ViewGUID><Sources><ReportSource><GUID>65cf8999-9fdd-4b0a-9d17-adf05a2df443</GUID><Name>Northwind (Repository)</Name><ConnectionGUID>1</ConnectionGUID><MetaData /><MetaSourceGUID>52833575-11ae-4b7d-8b5e-0f9b29d1267a</MetaSourceGUID></ReportSource></Sources><Models><ReportModel><GUID>86b299d9-c5fa-4628-ac73-e453c020bea2</GUID><Name>Model</Name><SourceGUID>65cf8999-9fdd-4b0a-9d17-adf05a2df443</SourceGUID></ReportModel></Models><Tasks><ReportTask><GUID>f23a77a8-728d-4dac-b3ad-2d087b984128</GUID><Name>Run Conversion to 6.1</Name><CancelReport>false</CancelReport><SourceGUID>65cf8999-9fdd-4b0a-9d17-adf05a2df443</SourceGUID><Script>@using System.IO&#xD;
@{&#xD;
    ReportTask task = Model;&#xD;
    Report report = task.Report;&#xD;
        &#xD;
    report.LogMessage("Browsing " + report.Repository.DashboardPublicFolder);&#xD;
    foreach (var folder in Directory.GetDirectories(report.Repository.DashboardPublicFolder))&#xD;
    {&#xD;
        report.LogMessage("Browsing " + folder);&#xD;
        foreach (var p in Directory.GetFiles(folder, "*.sdax"))&#xD;
        {&#xD;
            try {&#xD;
                var dashboard = Dashboard.LoadFromFile(p);&#xD;
                var reportsLoaded = new List&lt;string&gt;();&#xD;
                &#xD;
                report.LogMessage("Processing {0} ({1})", dashboard.Name , p);&#xD;
                //create a report for this dashboard&#xD;
                var newReport = Report.Create(report.Repository);&#xD;
                newReport.ExecutionView.Views.Clear();&#xD;
                newReport.Sources.Clear();&#xD;
&#xD;
                var containerView = newReport.AddChildView(newReport.ExecutionView, "Container");&#xD;
                &#xD;
                var firstModel = newReport.Models[0];&#xD;
                var lastGroup = "";&#xD;
                foreach (var item in dashboard.Items.OrderBy(i =&gt; i.Order)) {&#xD;
                    try {&#xD;
                        if (item.GroupName != lastGroup) {&#xD;
                            //Add a free view for the group name&#xD;
                            var groupNameView = newReport.AddChildView(containerView, "Free");&#xD;
                            groupNameView.Name = item.GroupName;&#xD;
                            groupNameView.UseCustomTemplate = true;&#xD;
                            groupNameView.CustomTemplate = "&lt;h3&gt;" + item.GroupName + "&lt;/h3&gt;";&#xD;
                            lastGroup = item.GroupName;&#xD;
                        }&#xD;
&#xD;
                        var view = newReport.AddChildView(containerView, "Widget");&#xD;
&#xD;
                        var widget = DashboardWidgetsPool.Widgets.ContainsKey(item.WidgetGUID) ? DashboardWidgetsPool.Widgets[item.WidgetGUID] : null;&#xD;
                        if (widget == null) { throw new Exception("Error: the widget does not exist"); }&#xD;
                        &#xD;
                        view.InitParameters(false);&#xD;
                        view.Name = string.IsNullOrEmpty(item.Name) ? widget.Name : item.Name;                &#xD;
                        view.SetParameter("widget_title", view.Name);&#xD;
                        view.SetParameter("widget_icon", string.IsNullOrEmpty(item.Name) ? widget.Icon : item.Icon);&#xD;
                        view.SetParameter("widget_color", string.IsNullOrEmpty(item.Color) ? widget.Color : item.Color);&#xD;
                        view.SetParameter("widget_exec_view", widget.ExecViewGUID);&#xD;
                        view.SetParameter("widget_exec_report", widget.ExecReportPath);&#xD;
                        &#xD;
                        //Load the report&#xD;
                        var filePath = report.Repository.ReportsFolder + widget.ReportPath;&#xD;
                        if (!System.IO.File.Exists(filePath)) { throw new Exception("Error: the report does not exist"); }&#xD;
                        var widgetReport = Report.LoadFromFile(filePath, report.Repository); &#xD;
                        var widgetView = widgetReport.GetWidgetViews().FirstOrDefault(i =&gt; i.WidgetDefinition.GUID == widget.GUID);&#xD;
                        if (widgetView == null) { throw new Exception("Error: the widget view does not exist"); }&#xD;
&#xD;
                        if (!string.IsNullOrEmpty(widget.ExecViewGUID)) {&#xD;
                            var execView = newReport.Views.FirstOrDefault(i =&gt; i.GUID == widget.ExecViewGUID);&#xD;
                            var widgetExecView = widgetReport.Views.FirstOrDefault(i =&gt; i.GUID == widget.ExecViewGUID);&#xD;
                            if (execView == null &amp;&amp; widgetExecView != null) {&#xD;
                                newReport.Views.Add(widgetExecView);&#xD;
                            }&#xD;
                        }                                                                        &#xD;
                        &#xD;
                        //Copy models&#xD;
                        if (!reportsLoaded.Contains(widgetReport.FilePath)) {&#xD;
                            report.LogMessage("Loading models from " + widgetReport.FilePath);&#xD;
                            foreach (var model in widgetReport.Models) {&#xD;
                                newReport.Models.Add(model);&#xD;
                                var source = model.Source;&#xD;
                                ReportSource newSource = newReport.Sources.FirstOrDefault(i =&gt; i.GUID == source.GUID);&#xD;
                                if (newSource == null)  {&#xD;
                                    //Clear other existing source&#xD;
                                    if (!string.IsNullOrEmpty(source.MetaSourceGUID)) {&#xD;
                                        newReport.Sources.RemoveAll(i =&gt; i.MetaSourceGUID == source.MetaSourceGUID);&#xD;
                                    }&#xD;
                                    newReport.Sources.Add(source);                                    &#xD;
                                }&#xD;
                                newReport.InitReferences();&#xD;
                            }&#xD;
                            //Add common scripts..&#xD;
                            newReport.CommonScripts.AddRange(widgetReport.CommonScripts);&#xD;
                            &#xD;
                            reportsLoaded.Add(widgetReport.FilePath);&#xD;
                        }&#xD;
                        //Add widget view, add the corresponding model view&#xD;
                        var viewToAdd = widgetView;&#xD;
                        while (viewToAdd.TemplateName != "Model" &amp;&amp; viewToAdd.ParentView != null) {&#xD;
                            viewToAdd = viewToAdd.ParentView;&#xD;
                        }                                               &#xD;
                        view.Views.Add(viewToAdd.TemplateName != "Report" ? viewToAdd : widgetView);                        &#xD;
                    }&#xD;
                    catch( Exception ex) {&#xD;
                        report.LogMessage(ex.Message);&#xD;
                    }&#xD;
                }     &#xD;
                var path = report.Repository.DashboardPublicFolder + "\\" + Path.GetFileNameWithoutExtension(p) + ".srex";&#xD;
                newReport.Models.Remove(firstModel);&#xD;
                newReport.SaveToFile(path);                &#xD;
                report.LogMessage("New report saved to " + path + "\r\n");&#xD;
            }&#xD;
            catch( Exception ex) {&#xD;
                report.LogMessage(ex.Message);&#xD;
            }&#xD;
        }&#xD;
    }    &#xD;
}&#xD;
</Script><SortOrder>1</SortOrder></ReportTask></Tasks><Views><ReportView><GUID>a7143b42-f147-4cd2-aaf2-c2972a6a0830</GUID><Name>View</Name><Views><ReportView><GUID>3ec5d3ed-bc0c-468b-890a-89e9e8605b28</GUID><Name>Model</Name><Views><ReportView><GUID>e9b43781-1415-4ad9-ba46-ff3a298a571a</GUID><Name>Model Container</Name><Views><ReportView><GUID>ad36ddbe-5d07-4df3-b590-86c9a2fcb381</GUID><Name>Page Table</Name><TemplateName>Page Table</TemplateName><SortOrder>1</SortOrder></ReportView><ReportView><GUID>68599339-6b7a-414c-964b-46292dc6b66a</GUID><Name>Chart JS</Name><TemplateName>Chart JS</TemplateName><SortOrder>2</SortOrder></ReportView><ReportView><GUID>2a129ef3-45e7-438d-a56a-33e9ae7484b4</GUID><Name>Chart NVD3</Name><TemplateName>Chart NVD3</TemplateName><SortOrder>3</SortOrder></ReportView><ReportView><GUID>6381d647-849b-42be-b29f-8e49658861e8</GUID><Name>Chart Plotly</Name><TemplateName>Chart Plotly</TemplateName><SortOrder>4</SortOrder></ReportView><ReportView><GUID>2a79d4c3-e90c-4ff0-a9b7-fbc976dd5c51</GUID><Name>Data Table</Name><TemplateName>Data Table</TemplateName><SortOrder>5</SortOrder></ReportView></Views><TemplateName>Model Container</TemplateName><SortOrder>1</SortOrder></ReportView></Views><TemplateName>Model</TemplateName><ModelGUID>86b299d9-c5fa-4628-ac73-e453c020bea2</ModelGUID><UseModelName>true</UseModelName><SortOrder>1</SortOrder></ReportView></Views><TemplateName>Report</TemplateName><Parameters><Parameter><Name>messages_mode</Name><Value>enabledshown</Value></Parameter></Parameters><SortOrder>1</SortOrder></ReportView></Views><Cancel>false</Cancel></Report>